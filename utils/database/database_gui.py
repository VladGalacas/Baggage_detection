import customtkinter as ctk
import tkinter as tk
import tkinter.messagebox as mb
from utils.database.database_moduls import DatabaseFunctionality
from utils.utils import PasswordEntry, Table, center

class DatabaseMenu:

    def __init__(self, root, menu):
        """
        –ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é,
        –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ tkinter. –û–Ω –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã –∏–∑ –∫–ª–∞—Å—Å–∞ DatabaseFunctionality.
        :param root: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ tkinter.Tk.
        :param menu: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ tkinter.Menu.
        """
        assert isinstance(root, tk.Tk), "–ü–∞—Ä–∞–º–µ—Ç—Ä win –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∫–ª–∞—Å—Å–∞ tkinter.Tk"
        assert isinstance(menu, tk.Menu), "–ü–∞—Ä–∞–º–µ—Ç—Ä menu –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∫–ª–∞—Å—Å–∞ tkinter.Menu"

        self.root = root
        self.menu = menu
        self.db_funtional = None
        self.selected_db_menu = None

    def __call__(self, *args, **kwargs):
        # –ú–µ–Ω—é "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        self.database_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", menu=self.database_menu)

        # –ü–æ–¥–º–µ–Ω—é "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"
        connection_menu = tk.Menu(self.database_menu, tearoff=0)
        connection_menu.add_command(label="PostgreSQL", command=lambda: self._connect_or_create_database('postgresql',
                                                                                                         'connect'))
        connection_menu.add_command(label="MySQL",
                                    command=lambda: self._connect_or_create_database('mysql', 'connect'))
        # self.connection_menu.add_command(label="SQLite", command=lambda: self._connect_or_create_database('sqlite', 'connect'))
        connection_menu.add_command(label="Oracle",
                                    command=lambda: self._connect_or_create_database('oracle', 'connect'))
        connection_menu.add_command(label="Microsoft SQL Server",
                                    command=lambda: self._connect_or_create_database('mssql', 'connect'))
        self.database_menu.add_cascade(label="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", menu=connection_menu)
        # self.database_menu.add_command(label="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")


        # –ü–æ–¥–º–µ–Ω—é "–°–æ–∑–¥–∞–Ω–∏–µ –ë–î"
        create_database_menu = tk.Menu(self.database_menu, tearoff=0)
        create_database_menu.add_command(label="PostgreSQL",
                                         command=lambda: self._connect_or_create_database('postgresql', 'create'))
        create_database_menu.add_command(label="MySQL",
                                         command=lambda: self._connect_or_create_database('mysql', 'create'))
        # self.create_database_menu.add_command(label="SQLite", command=lambda: self._connect_or_create_database('sqlite', 'create'))
        create_database_menu.add_command(label="Oracle",
                                         command=lambda: self._connect_or_create_database('oracle', 'create'))
        create_database_menu.add_command(label="Microsoft SQL Server",
                                         command=lambda: self._connect_or_create_database('mssql', 'create'))
        self.database_menu.add_cascade(label="–°–æ–∑–¥–∞–Ω–∏–µ –ë–î", menu=create_database_menu)
        # self.database_menu.add_command(label="–°–æ–∑–¥–∞–Ω–∏–µ –ë–î")

    def _connect_or_create_database(self, type_db, type_event):
        topframe = tk.Toplevel(self.root)
        topframe.config(bg='black')
        topframe.iconbitmap("MAI.ico")
        topframe.resizable(width=False, height=False)
        topframe.title('–î–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
        ctk.CTkLabel(topframe, text='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', anchor="w", width=17).grid(column=0, row=0)
        ctk.CTkLabel(topframe, text='–ü–∞—Ä–æ–ª—å', anchor="w", width=17).grid(column=0, row=1)
        ctk.CTkLabel(topframe, text='–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', anchor="w", width=17).grid(column=0, row=2)
        ctk.CTkLabel(topframe, text='–•–æ—Å—Ç', anchor="w", width=17).grid(column=0, row=3)
        ctk.CTkLabel(topframe, text='–ü–æ—Ä—Ç', anchor="w", width=17).grid(column=0, row=4)

        enter_dict = {}
        enter_dict['user_ent'] = ctk.CTkEntry(topframe, width=200)
        enter_dict['user_ent'].grid(column=1, row=0)
        enter_dict['password_ent'] = PasswordEntry(topframe, width=200)
        visibility_pass_but = ctk.CTkButton(topframe, text='üëÅ',
                                         command=enter_dict['password_ent'].toggle_password_visibility, width=2)
        visibility_pass_but.grid(column=2, row=1)
        enter_dict['password_ent'].grid(column=1, row=1)
        enter_dict['name_ent'] = ctk.CTkEntry(topframe, width=200)
        enter_dict['name_ent'].grid(column=1, row=2)
        enter_dict['host_ent'] = ctk.CTkEntry(topframe, width=200)
        enter_dict['host_ent'].grid(column=1, row=3)
        enter_dict['port_ent'] = ctk.CTkEntry(topframe, width=200)
        enter_dict['port_ent'].grid(column=1, row=4)

        db_info_names = ['db_user', 'db_password', 'db_name', 'db_host', 'db_port']

        def get_info():
            db_info_list = []
            for ents in list(enter_dict.values()):
                db_info_list.append(ents.get())
            self.db_info = dict(zip(db_info_names, db_info_list))
            db_funtional_try = DatabaseFunctionality(type_db, self.db_info)
            if type_event == 'connect':
                event_result_try = db_funtional_try.connect_database()
            else:
                event_result_try = db_funtional_try.create_database()
            if event_result_try == False:
                if type_event == 'connect':
                    mb.showerror('–û—à–∏–±–∫–∞',
                                 f'–õ–∏–±–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {self.db_info["db_name"]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                else:
                    mb.showerror('–û—à–∏–±–∫–∞', '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
            elif event_result_try == None:
                mb.showerror('–û—à–∏–±–∫–∞', f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {self.db_info['db_name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                self.db_funtional = db_funtional_try
                if type_event == 'connect':
                    mb.showinfo('–£—Å–ø–µ—Ö', f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {self.db_info["db_name"]}!')
                else:
                    mb.showinfo('–£—Å–ø–µ—Ö',
                                f'–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {self.db_info["db_name"]} –∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ω–µ–π!')
                topframe.destroy()
                if self.selected_db_menu != None:
                    self.database_menu.delete(2)
                self.selected_db_menu = tk.Menu(self.database_menu, tearoff=0)
                self.database_menu.add_cascade(label=self.db_info['db_name'], menu=self.selected_db_menu)
                self.view_menu = tk.Menu(self.selected_db_menu, tearoff=0)
                self.delete_table_menu = tk.Menu(self.selected_db_menu, tearoff=0)
                self.table_names = self.db_funtional.get_table_names()
                if len(self.table_names) > 0:
                    for name in self.table_names:
                        self.view_menu.add_command(label=name,
                                                   command=lambda nameview=name: self._view_table(nameview))
                        self.delete_table_menu.add_command(label=name,
                                                           command=lambda namedel=name: self._delete_table(namedel))
                else:
                    self.view_menu.add_command(label="–í –¥–∞–Ω–Ω–æ–π –ë–î —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")
                    self.delete_table_menu.add_command(label="–í –¥–∞–Ω–Ω–æ–π –ë–î —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")
                self.selected_db_menu.add_cascade(label="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã", menu=self.view_menu)
                self.selected_db_menu.add_cascade(label="–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã", menu=self.delete_table_menu)
                self.selected_db_menu.add_command(label="–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", command=self._create_table)
                # self.selected_db_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", command=self._delete_db)

        if type_event == 'connect':
            save_but = ctk.CTkButton(topframe, text='–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', command=get_info)
        else:
            save_but = ctk.CTkButton(topframe, text='–°–æ–∑–¥–∞—Ç—å –ë–î', command=get_info)
        save_but.grid(column=0, row=5, columnspan=2)

        topframe.update()
        topframe.geometry(f"{topframe.winfo_reqwidth()}x{topframe.winfo_reqheight()}")
        center(topframe)

    def _create_table(self):
        topframe = tk.Toplevel(self.root)
        topframe.config(bg='black')
        topframe.iconbitmap("MAI.ico")
        topframe.resizable(width=False, height=False)
        topframe.title('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã')

        frame = tk.Frame(topframe)
        frame.pack(expand=True)

        ctk.CTkLabel(frame, text='–ò–º—è —Ç–∞–±–ª–∏—Ü—ã', anchor=tk.CENTER, width=20).pack(pady=5)
        ent = ctk.CTkEntry(frame, width=200)
        ent.pack(pady=5)

        def get_info():
            table_name = ent.get()
            result = self.db_funtional.create_table(table_name)
            if result:
                self.table_names = self.db_funtional.get_table_names()

                self.view_menu.delete(0, tk.END)
                self.delete_table_menu.delete(0, tk.END)

                if len(self.table_names) > 0:
                    for name in self.table_names:
                        self.view_menu.add_command(label=name,
                                                   command=lambda nameview=name: self._view_table(nameview))
                        self.delete_table_menu.add_command(label=name,
                                                           command=lambda namedel=name: self._delete_table(namedel))
                else:
                    self.view_menu.add_command(label="–í –¥–∞–Ω–Ω–æ–π –ë–î —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")
                    self.delete_table_menu.add_command(label="–í –¥–∞–Ω–Ω–æ–π –ë–î —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")

                mb.showinfo('–£—Å–ø–µ—Ö', f'–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É {table_name}')
                topframe.destroy()
            else:
                mb.showerror('–û—à–∏–±–∫–∞', f'–¢–∞–±–ª–∏—Ü–∞ {table_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {self.db_info["db_name"]}!')

        create_but = ctk.CTkButton(frame, text='–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', command=get_info)
        create_but.pack(pady=5)

        topframe.update()
        topframe.geometry(f"{topframe.winfo_reqwidth() + 30}x{topframe.winfo_reqheight() + 30}")
        center(topframe)

    def _view_table(self, name_table):
        topframe = tk.Toplevel(self.root)
        topframe.config(bg='black')
        topframe.iconbitmap("MAI.ico")
        topframe.resizable(width=False, height=False)
        topframe.title(f'–¢–∞–±–ª–∏—Ü–∞ {name_table}')

        df_table = self.db_funtional.get_table(name_table)
        table_widget = Table(topframe, df_table)
        table_widget.table.configure(height=20)
        table_widget.pack()

        topframe.update()
        topframe.geometry(f"{topframe.winfo_reqwidth()}x{topframe.winfo_reqheight()}")
        center(topframe)

    def _delete_table(self, name_table):
        ask_drop_table = mb.askyesno('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã', f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {name_table}?')
        if ask_drop_table:
            drop_result = self.db_funtional.delete_table(name_table)
            if drop_result:
                self.table_names = self.db_funtional.get_table_names()

                self.view_menu.delete(0, tk.END)
                self.delete_table_menu.delete(0, tk.END)

                if len(self.table_names) > 0:
                    for name in self.table_names:
                        self.view_menu.add_command(label=name,
                                                   command=lambda nameview=name: self._view_table(nameview))
                        self.delete_table_menu.add_command(label=name,
                                                           command=lambda namedel=name: self._delete_table(namedel))
                else:
                    self.view_menu.add_command(label="–í –¥–∞–Ω–Ω–æ–π –ë–î —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")
                    self.delete_table_menu.add_command(label="–í –¥–∞–Ω–Ω–æ–π –ë–î —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")

                mb.showinfo('–£—Å–ø–µ—Ö', f'–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É {name_table}')
            else:
                mb.showerror('–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {name_table}')

    def _delete_db(self):
        ask_drop_db = mb.askyesno('–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                                  f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {self.db_info["db_name"]}?')
        if ask_drop_db:
            drop_result = self.db_funtional.delete_database()
            if drop_result:
                self.database_menu.delete(2)
                mb.showinfo('–£—Å–ø–µ—Ö', f'–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {self.db_info["db_name"]}')
